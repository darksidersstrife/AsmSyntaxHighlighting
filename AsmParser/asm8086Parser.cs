//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from asm8086.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class asm8086Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, BYTE=15, WORD=16, DWORD=17, 
		DSEG=18, CSEG=19, INCLUDE=20, TITLE=21, END=22, ORG=23, ENDIF=24, IF=25, 
		EQU=26, DW=27, DB=28, DD=29, PTR=30, NOT=31, OFFSET=32, RW=33, RB=34, 
		RS=35, LENGTH=36, COMMENT=37, REGISTER=38, OPCODE=39, REP=40, DOLLAR=41, 
		SIGN=42, NAME=43, NUMBER=44, STRING=45, EOL=46, WS=47;
	public const int
		RULE_prog = 0, RULE_line = 1, RULE_instruction = 2, RULE_lbl = 3, RULE_assemblerdirective = 4, 
		RULE_rw = 5, RULE_rb = 6, RULE_rs = 7, RULE_cseg = 8, RULE_dseg = 9, RULE_dw = 10, 
		RULE_db = 11, RULE_dd = 12, RULE_equ = 13, RULE_if_ = 14, RULE_assemblerexpression = 15, 
		RULE_assemblerlogical = 16, RULE_assemblerterm = 17, RULE_endif = 18, 
		RULE_end = 19, RULE_org = 20, RULE_title = 21, RULE_include = 22, RULE_expressionlist = 23, 
		RULE_label = 24, RULE_expression = 25, RULE_multiplyingExpression = 26, 
		RULE_argument = 27, RULE_ptr = 28, RULE_dollar = 29, RULE_register_ = 30, 
		RULE_string = 31, RULE_name = 32, RULE_number = 33, RULE_opcode = 34, 
		RULE_rep = 35, RULE_comment = 36;
	public static readonly string[] ruleNames = {
		"prog", "line", "instruction", "lbl", "assemblerdirective", "rw", "rb", 
		"rs", "cseg", "dseg", "dw", "db", "dd", "equ", "if_", "assemblerexpression", 
		"assemblerlogical", "assemblerterm", "endif", "end", "org", "title", "include", 
		"expressionlist", "label", "expression", "multiplyingExpression", "argument", 
		"ptr", "dollar", "register_", "string", "name", "number", "opcode", "rep", 
		"comment"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "':'", "'.'", "'('", "')'", "'eq'", "'ne'", "','", "'*'", 
		"'/'", "'mod'", "'and'", "'['", "']'", null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "BYTE", "WORD", "DWORD", "DSEG", "CSEG", "INCLUDE", 
		"TITLE", "END", "ORG", "ENDIF", "IF", "EQU", "DW", "DB", "DD", "PTR", 
		"NOT", "OFFSET", "RW", "RB", "RS", "LENGTH", "COMMENT", "REGISTER", "OPCODE", 
		"REP", "DOLLAR", "SIGN", "NAME", "NUMBER", "STRING", "EOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "asm8086.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static asm8086Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public asm8086Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public asm8086Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode[] EOL() { return GetTokens(asm8086Parser.EOL); }
		public ITerminalNode EOL(int i) {
			return GetToken(asm8086Parser.EOL, i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << DSEG) | (1L << CSEG) | (1L << INCLUDE) | (1L << TITLE) | (1L << END) | (1L << ORG) | (1L << ENDIF) | (1L << IF) | (1L << DW) | (1L << DB) | (1L << DD) | (1L << RW) | (1L << RB) | (1L << RS) | (1L << COMMENT) | (1L << OPCODE) | (1L << REP) | (1L << NAME) | (1L << EOL))) != 0)) {
				{
				{
				State = 74; line();
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__0) {
					{
					{
					State = 75; Match(T__0);
					State = 76; line();
					}
					}
					State = 81;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 82; Match(EOL);
				}
				}
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public LblContext lbl() {
			return GetRuleContext<LblContext>(0);
		}
		public AssemblerdirectiveContext assemblerdirective() {
			return GetRuleContext<AssemblerdirectiveContext>(0);
		}
		public InstructionContext instruction() {
			return GetRuleContext<InstructionContext>(0);
		}
		public CommentContext comment() {
			return GetRuleContext<CommentContext>(0);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 89; lbl();
				}
				break;
			}
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case DSEG:
			case CSEG:
			case INCLUDE:
			case TITLE:
			case END:
			case ORG:
			case ENDIF:
			case IF:
			case DW:
			case DB:
			case DD:
			case RW:
			case RB:
			case RS:
			case NAME:
				{
				State = 92; assemblerdirective();
				}
				break;
			case OPCODE:
			case REP:
				{
				State = 93; instruction();
				}
				break;
			case T__0:
			case COMMENT:
			case EOL:
				break;
			default:
				break;
			}
			State = 97;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT) {
				{
				State = 96; comment();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstructionContext : ParserRuleContext {
		public OpcodeContext opcode() {
			return GetRuleContext<OpcodeContext>(0);
		}
		public RepContext rep() {
			return GetRuleContext<RepContext>(0);
		}
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public InstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstructionContext instruction() {
		InstructionContext _localctx = new InstructionContext(Context, State);
		EnterRule(_localctx, 4, RULE_instruction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REP) {
				{
				State = 99; rep();
				}
			}

			State = 102; opcode();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << BYTE) | (1L << WORD) | (1L << DWORD) | (1L << PTR) | (1L << NOT) | (1L << OFFSET) | (1L << LENGTH) | (1L << REGISTER) | (1L << DOLLAR) | (1L << SIGN) | (1L << NAME) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 103; expressionlist();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LblContext : ParserRuleContext {
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public LblContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lbl; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterLbl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitLbl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLbl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LblContext lbl() {
		LblContext _localctx = new LblContext(Context, State);
		EnterRule(_localctx, 6, RULE_lbl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; label();
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 107; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblerdirectiveContext : ParserRuleContext {
		public OrgContext org() {
			return GetRuleContext<OrgContext>(0);
		}
		public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public If_Context if_() {
			return GetRuleContext<If_Context>(0);
		}
		public EndifContext endif() {
			return GetRuleContext<EndifContext>(0);
		}
		public EquContext equ() {
			return GetRuleContext<EquContext>(0);
		}
		public DbContext db() {
			return GetRuleContext<DbContext>(0);
		}
		public DwContext dw() {
			return GetRuleContext<DwContext>(0);
		}
		public CsegContext cseg() {
			return GetRuleContext<CsegContext>(0);
		}
		public DdContext dd() {
			return GetRuleContext<DdContext>(0);
		}
		public DsegContext dseg() {
			return GetRuleContext<DsegContext>(0);
		}
		public TitleContext title() {
			return GetRuleContext<TitleContext>(0);
		}
		public IncludeContext include() {
			return GetRuleContext<IncludeContext>(0);
		}
		public RwContext rw() {
			return GetRuleContext<RwContext>(0);
		}
		public RbContext rb() {
			return GetRuleContext<RbContext>(0);
		}
		public RsContext rs() {
			return GetRuleContext<RsContext>(0);
		}
		public AssemblerdirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblerdirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterAssemblerdirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitAssemblerdirective(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblerdirective(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblerdirectiveContext assemblerdirective() {
		AssemblerdirectiveContext _localctx = new AssemblerdirectiveContext(Context, State);
		EnterRule(_localctx, 8, RULE_assemblerdirective);
		try {
			State = 126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; org();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 111; end();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 112; if_();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 113; endif();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114; equ();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 115; db();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 116; dw();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 117; cseg();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 118; dd();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 119; dseg();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 120; title();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 121; include();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 122; rw();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 123; rb();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 124; rs();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 125; Match(T__2);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RwContext : ParserRuleContext {
		public ITerminalNode RW() { return GetToken(asm8086Parser.RW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public RwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rw; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterRw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitRw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RwContext rw() {
		RwContext _localctx = new RwContext(Context, State);
		EnterRule(_localctx, 10, RULE_rw);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 128; name();
				}
			}

			State = 131; Match(RW);
			State = 132; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RbContext : ParserRuleContext {
		public ITerminalNode RB() { return GetToken(asm8086Parser.RB, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public RbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rb; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterRb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitRb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RbContext rb() {
		RbContext _localctx = new RbContext(Context, State);
		EnterRule(_localctx, 12, RULE_rb);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 134; name();
				}
			}

			State = 137; Match(RB);
			State = 138; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RsContext : ParserRuleContext {
		public ITerminalNode RS() { return GetToken(asm8086Parser.RS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public RsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rs; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterRs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitRs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RsContext rs() {
		RsContext _localctx = new RsContext(Context, State);
		EnterRule(_localctx, 14, RULE_rs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 140; name();
				}
			}

			State = 143; Match(RS);
			State = 144; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsegContext : ParserRuleContext {
		public ITerminalNode CSEG() { return GetToken(asm8086Parser.CSEG, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CsegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cseg; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterCseg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitCseg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCseg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsegContext cseg() {
		CsegContext _localctx = new CsegContext(Context, State);
		EnterRule(_localctx, 16, RULE_cseg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(CSEG);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << BYTE) | (1L << WORD) | (1L << DWORD) | (1L << PTR) | (1L << NOT) | (1L << OFFSET) | (1L << LENGTH) | (1L << REGISTER) | (1L << DOLLAR) | (1L << SIGN) | (1L << NAME) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 147; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DsegContext : ParserRuleContext {
		public ITerminalNode DSEG() { return GetToken(asm8086Parser.DSEG, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DsegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dseg; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterDseg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitDseg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDseg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DsegContext dseg() {
		DsegContext _localctx = new DsegContext(Context, State);
		EnterRule(_localctx, 18, RULE_dseg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; Match(DSEG);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << BYTE) | (1L << WORD) | (1L << DWORD) | (1L << PTR) | (1L << NOT) | (1L << OFFSET) | (1L << LENGTH) | (1L << REGISTER) | (1L << DOLLAR) | (1L << SIGN) | (1L << NAME) | (1L << NUMBER) | (1L << STRING))) != 0)) {
				{
				State = 151; expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DwContext : ParserRuleContext {
		public ITerminalNode DW() { return GetToken(asm8086Parser.DW, 0); }
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public DwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dw; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterDw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitDw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DwContext dw() {
		DwContext _localctx = new DwContext(Context, State);
		EnterRule(_localctx, 20, RULE_dw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(DW);
			State = 155; expressionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DbContext : ParserRuleContext {
		public ITerminalNode DB() { return GetToken(asm8086Parser.DB, 0); }
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public DbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_db; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterDb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitDb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DbContext db() {
		DbContext _localctx = new DbContext(Context, State);
		EnterRule(_localctx, 22, RULE_db);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(DB);
			State = 158; expressionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DdContext : ParserRuleContext {
		public ITerminalNode DD() { return GetToken(asm8086Parser.DD, 0); }
		public ExpressionlistContext expressionlist() {
			return GetRuleContext<ExpressionlistContext>(0);
		}
		public DdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dd; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterDd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitDd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DdContext dd() {
		DdContext _localctx = new DdContext(Context, State);
		EnterRule(_localctx, 24, RULE_dd);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; Match(DD);
			State = 161; expressionlist();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EquContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode EQU() { return GetToken(asm8086Parser.EQU, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EquContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equ; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterEqu(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitEqu(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EquContext equ() {
		EquContext _localctx = new EquContext(Context, State);
		EnterRule(_localctx, 26, RULE_equ);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; name();
			State = 164; Match(EQU);
			State = 165; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_Context : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(asm8086Parser.IF, 0); }
		public AssemblerexpressionContext assemblerexpression() {
			return GetRuleContext<AssemblerexpressionContext>(0);
		}
		public If_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterIf_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitIf_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_Context if_() {
		If_Context _localctx = new If_Context(Context, State);
		EnterRule(_localctx, 28, RULE_if_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(IF);
			State = 168; assemblerexpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblerexpressionContext : ParserRuleContext {
		public AssemblertermContext[] assemblerterm() {
			return GetRuleContexts<AssemblertermContext>();
		}
		public AssemblertermContext assemblerterm(int i) {
			return GetRuleContext<AssemblertermContext>(i);
		}
		public AssemblerlogicalContext[] assemblerlogical() {
			return GetRuleContexts<AssemblerlogicalContext>();
		}
		public AssemblerlogicalContext assemblerlogical(int i) {
			return GetRuleContext<AssemblerlogicalContext>(i);
		}
		public AssemblerexpressionContext assemblerexpression() {
			return GetRuleContext<AssemblerexpressionContext>(0);
		}
		public AssemblerexpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblerexpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterAssemblerexpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitAssemblerexpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblerexpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblerexpressionContext assemblerexpression() {
		AssemblerexpressionContext _localctx = new AssemblerexpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_assemblerexpression);
		int _la;
		try {
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NOT:
			case SIGN:
			case NAME:
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 170; assemblerterm();
				State = 176;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__5 || _la==T__6) {
					{
					{
					State = 171; assemblerlogical();
					State = 172; assemblerterm();
					}
					}
					State = 178;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 179; Match(T__3);
				State = 180; assemblerexpression();
				State = 181; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblerlogicalContext : ParserRuleContext {
		public AssemblerlogicalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblerlogical; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterAssemblerlogical(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitAssemblerlogical(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblerlogical(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblerlogicalContext assemblerlogical() {
		AssemblerlogicalContext _localctx = new AssemblerlogicalContext(Context, State);
		EnterRule(_localctx, 32, RULE_assemblerlogical);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			_la = TokenStream.LA(1);
			if ( !(_la==T__5 || _la==T__6) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblertermContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(asm8086Parser.NOT, 0); }
		public AssemblertermContext assemblerterm() {
			return GetRuleContext<AssemblertermContext>(0);
		}
		public AssemblertermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblerterm; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterAssemblerterm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitAssemblerterm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssemblerterm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssemblertermContext assemblerterm() {
		AssemblertermContext _localctx = new AssemblertermContext(Context, State);
		EnterRule(_localctx, 34, RULE_assemblerterm);
		try {
			State = 191;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187; name();
				}
				break;
			case SIGN:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; number();
				}
				break;
			case NOT:
				EnterOuterAlt(_localctx, 3);
				{
				{
				State = 189; Match(NOT);
				State = 190; assemblerterm();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndifContext : ParserRuleContext {
		public ITerminalNode ENDIF() { return GetToken(asm8086Parser.ENDIF, 0); }
		public EndifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endif; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterEndif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitEndif(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndif(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndifContext endif() {
		EndifContext _localctx = new EndifContext(Context, State);
		EnterRule(_localctx, 36, RULE_endif);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(ENDIF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		public ITerminalNode END() { return GetToken(asm8086Parser.END, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterEnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitEnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 38, RULE_end);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrgContext : ParserRuleContext {
		public ITerminalNode ORG() { return GetToken(asm8086Parser.ORG, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public OrgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_org; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterOrg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitOrg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrgContext org() {
		OrgContext _localctx = new OrgContext(Context, State);
		EnterRule(_localctx, 40, RULE_org);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(ORG);
			State = 198; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TitleContext : ParserRuleContext {
		public ITerminalNode TITLE() { return GetToken(asm8086Parser.TITLE, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public TitleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_title; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterTitle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitTitle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTitle(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TitleContext title() {
		TitleContext _localctx = new TitleContext(Context, State);
		EnterRule(_localctx, 42, RULE_title);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(TITLE);
			State = 201; @string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public ITerminalNode INCLUDE() { return GetToken(asm8086Parser.INCLUDE, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 44, RULE_include);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(INCLUDE);
			State = 204; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionlistContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterExpressionlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitExpressionlist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionlist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionlistContext expressionlist() {
		ExpressionlistContext _localctx = new ExpressionlistContext(Context, State);
		EnterRule(_localctx, 46, RULE_expressionlist);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206; expression();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 207; Match(T__7);
				State = 208; expression();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 48, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public MultiplyingExpressionContext[] multiplyingExpression() {
			return GetRuleContexts<MultiplyingExpressionContext>();
		}
		public MultiplyingExpressionContext multiplyingExpression(int i) {
			return GetRuleContext<MultiplyingExpressionContext>(i);
		}
		public ITerminalNode[] SIGN() { return GetTokens(asm8086Parser.SIGN); }
		public ITerminalNode SIGN(int i) {
			return GetToken(asm8086Parser.SIGN, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; multiplyingExpression();
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 217; Match(SIGN);
					State = 218; multiplyingExpression();
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplyingExpressionContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public MultiplyingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyingExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterMultiplyingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitMultiplyingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplyingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyingExpressionContext multiplyingExpression() {
		MultiplyingExpressionContext _localctx = new MultiplyingExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_multiplyingExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; argument();
			State = 229;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 225;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 226; argument();
					}
					} 
				}
				State = 231;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public DollarContext dollar() {
			return GetRuleContext<DollarContext>(0);
		}
		public Register_Context register_() {
			return GetRuleContext<Register_Context>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PtrContext ptr() {
			return GetRuleContext<PtrContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(asm8086Parser.NOT, 0); }
		public ITerminalNode OFFSET() { return GetToken(asm8086Parser.OFFSET, 0); }
		public ITerminalNode LENGTH() { return GetToken(asm8086Parser.LENGTH, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 54, RULE_argument);
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; dollar();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 234; register_();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 235; name();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 236; @string();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				{
				State = 237; Match(T__3);
				State = 238; expression();
				State = 239; Match(T__4);
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				{
				State = 243;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SIGN:
				case NUMBER:
					{
					State = 241; number();
					}
					break;
				case NAME:
					{
					State = 242; name();
					}
					break;
				case T__12:
					break;
				default:
					break;
				}
				State = 245; Match(T__12);
				State = 246; expression();
				State = 247; Match(T__13);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 249; ptr();
				State = 250; expression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 252; Match(NOT);
				State = 253; expression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 254; Match(OFFSET);
				State = 255; expression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 256; Match(LENGTH);
				State = 257; expression();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				{
				State = 258; register_();
				State = 259; Match(T__1);
				}
				State = 261; expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrContext : ParserRuleContext {
		public ITerminalNode PTR() { return GetToken(asm8086Parser.PTR, 0); }
		public ITerminalNode BYTE() { return GetToken(asm8086Parser.BYTE, 0); }
		public ITerminalNode WORD() { return GetToken(asm8086Parser.WORD, 0); }
		public ITerminalNode DWORD() { return GetToken(asm8086Parser.DWORD, 0); }
		public PtrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptr; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterPtr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitPtr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPtr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PtrContext ptr() {
		PtrContext _localctx = new PtrContext(Context, State);
		EnterRule(_localctx, 56, RULE_ptr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << WORD) | (1L << DWORD))) != 0)) {
				{
				State = 265;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << WORD) | (1L << DWORD))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 268; Match(PTR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DollarContext : ParserRuleContext {
		public ITerminalNode DOLLAR() { return GetToken(asm8086Parser.DOLLAR, 0); }
		public DollarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dollar; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterDollar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitDollar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDollar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DollarContext dollar() {
		DollarContext _localctx = new DollarContext(Context, State);
		EnterRule(_localctx, 58, RULE_dollar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; Match(DOLLAR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Register_Context : ParserRuleContext {
		public ITerminalNode REGISTER() { return GetToken(asm8086Parser.REGISTER, 0); }
		public Register_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_register_; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterRegister_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitRegister_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegister_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Register_Context register_() {
		Register_Context _localctx = new Register_Context(Context, State);
		EnterRule(_localctx, 60, RULE_register_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(REGISTER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(asm8086Parser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 62, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(asm8086Parser.NAME, 0); }
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 64, RULE_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(asm8086Parser.NUMBER, 0); }
		public ITerminalNode SIGN() { return GetToken(asm8086Parser.SIGN, 0); }
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitNumber(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 66, RULE_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SIGN) {
				{
				State = 278; Match(SIGN);
				}
			}

			State = 281; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpcodeContext : ParserRuleContext {
		public ITerminalNode OPCODE() { return GetToken(asm8086Parser.OPCODE, 0); }
		public OpcodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opcode; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterOpcode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitOpcode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpcode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpcodeContext opcode() {
		OpcodeContext _localctx = new OpcodeContext(Context, State);
		EnterRule(_localctx, 68, RULE_opcode);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(OPCODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepContext : ParserRuleContext {
		public ITerminalNode REP() { return GetToken(asm8086Parser.REP, 0); }
		public RepContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rep; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterRep(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitRep(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRep(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RepContext rep() {
		RepContext _localctx = new RepContext(Context, State);
		EnterRule(_localctx, 70, RULE_rep);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; Match(REP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public ITerminalNode COMMENT() { return GetToken(asm8086Parser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			Iasm8086Listener typedListener = listener as Iasm8086Listener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			Iasm8086Visitor<TResult> typedVisitor = visitor as Iasm8086Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 72, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x31', '\x124', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'P', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', 'S', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', 'W', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'Z', '\v', '\x2', '\x3', '\x3', '\x5', '\x3', ']', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x61', '\n', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x64', '\n', '\x3', '\x3', '\x4', '\x5', '\x4', 'g', '\n', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 'k', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', 'o', '\n', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\x81', '\n', '\x6', '\x3', '\a', '\x5', '\a', '\x84', '\n', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x5', '\b', '\x8A', 
		'\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x5', 
		'\t', '\x90', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', '\x97', '\n', '\n', '\x3', '\v', '\x3', 
		'\v', '\x5', '\v', '\x9B', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\xB1', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\xB4', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xBA', '\n', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\xC2', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', 
		'\xD4', '\n', '\x19', '\f', '\x19', '\xE', '\x19', '\xD7', '\v', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\a', '\x1B', '\xDE', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\xE1', 
		'\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', 
		'\xE6', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\xE9', '\v', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x5', '\x1D', '\xF6', '\n', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x10A', '\n', '\x1D', '\x3', '\x1E', 
		'\x5', '\x1E', '\x10D', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '#', '\x5', '#', '\x11A', '\n', '#', 
		'\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x2', '\x2', '\'', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', 
		'\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', 
		'\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 
		'H', 'J', '\x2', '\x5', '\x3', '\x2', '\b', '\t', '\x3', '\x2', '\v', 
		'\xE', '\x3', '\x2', '\x11', '\x13', '\x2', '\x131', '\x2', 'X', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\\', '\x3', '\x2', '\x2', '\x2', '\x6', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'l', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\f', '\x83', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x89', '\x3', '\x2', '\x2', '\x2', '\x10', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x94', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x16', '\x9C', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA2', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', ' ', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xBB', '\x3', '\x2', '\x2', '\x2', '$', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xC3', '\x3', '\x2', '\x2', '\x2', '(', '\xC5', '\x3', 
		'\x2', '\x2', '\x2', '*', '\xC7', '\x3', '\x2', '\x2', '\x2', ',', '\xCA', 
		'\x3', '\x2', '\x2', '\x2', '.', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\x32', '\xD8', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x36', '\xE2', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x109', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '<', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x112', '\x3', '\x2', '\x2', '\x2', '@', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x116', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x46', '\x11D', '\x3', '\x2', '\x2', 
		'\x2', 'H', '\x11F', '\x3', '\x2', '\x2', '\x2', 'J', '\x121', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'Q', '\x5', '\x4', '\x3', '\x2', 'M', 'N', '\a', 
		'\x3', '\x2', '\x2', 'N', 'P', '\x5', '\x4', '\x3', '\x2', 'O', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\x3', 
		'\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', 
		'\x30', '\x2', '\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', 'L', 
		'\x3', '\x2', '\x2', '\x2', 'W', 'Z', '\x3', '\x2', '\x2', '\x2', 'X', 
		'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'Y', '\x3', '\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', '[', ']', '\x5', '\b', '\x5', '\x2', '\\', '[', '\x3', '\x2', '\x2', 
		'\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '`', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x61', '\x5', '\n', '\x6', '\x2', '_', '\x61', '\x5', 
		'\x6', '\x4', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '_', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\x5', 'J', '&', '\x2', 
		'\x63', '\x62', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x5', '\x3', '\x2', '\x2', '\x2', '\x65', 'g', 
		'\x5', 'H', '%', '\x2', '\x66', '\x65', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 
		'h', 'j', '\x5', '\x46', '$', '\x2', 'i', 'k', '\x5', '\x30', '\x19', 
		'\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x3', '\x2', '\x2', 
		'\x2', 'k', '\a', '\x3', '\x2', '\x2', '\x2', 'l', 'n', '\x5', '\x32', 
		'\x1A', '\x2', 'm', 'o', '\a', '\x4', '\x2', '\x2', 'n', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', '\t', '\x3', 
		'\x2', '\x2', '\x2', 'p', '\x81', '\x5', '*', '\x16', '\x2', 'q', '\x81', 
		'\x5', '(', '\x15', '\x2', 'r', '\x81', '\x5', '\x1E', '\x10', '\x2', 
		's', '\x81', '\x5', '&', '\x14', '\x2', 't', '\x81', '\x5', '\x1C', '\xF', 
		'\x2', 'u', '\x81', '\x5', '\x18', '\r', '\x2', 'v', '\x81', '\x5', '\x16', 
		'\f', '\x2', 'w', '\x81', '\x5', '\x12', '\n', '\x2', 'x', '\x81', '\x5', 
		'\x1A', '\xE', '\x2', 'y', '\x81', '\x5', '\x14', '\v', '\x2', 'z', '\x81', 
		'\x5', ',', '\x17', '\x2', '{', '\x81', '\x5', '.', '\x18', '\x2', '|', 
		'\x81', '\x5', '\f', '\a', '\x2', '}', '\x81', '\x5', '\xE', '\b', '\x2', 
		'~', '\x81', '\x5', '\x10', '\t', '\x2', '\x7F', '\x81', '\a', '\x5', 
		'\x2', '\x2', '\x80', 'p', '\x3', '\x2', '\x2', '\x2', '\x80', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x80', 'r', '\x3', '\x2', '\x2', '\x2', '\x80', 
		's', '\x3', '\x2', '\x2', '\x2', '\x80', 't', '\x3', '\x2', '\x2', '\x2', 
		'\x80', 'u', '\x3', '\x2', '\x2', '\x2', '\x80', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\x80', 'w', '\x3', '\x2', '\x2', '\x2', '\x80', 'x', '\x3', '\x2', 
		'\x2', '\x2', '\x80', 'y', '\x3', '\x2', '\x2', '\x2', '\x80', 'z', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '{', '\x3', '\x2', '\x2', '\x2', '\x80', 
		'|', '\x3', '\x2', '\x2', '\x2', '\x80', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x81', '\v', '\x3', '\x2', '\x2', '\x2', '\x82', '\x84', 
		'\x5', '\x42', '\"', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x84', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x86', '\a', '#', '\x2', '\x2', '\x86', '\x87', 
		'\x5', '\x34', '\x1B', '\x2', '\x87', '\r', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x8A', '\x5', '\x42', '\"', '\x2', '\x89', '\x88', '\x3', '\x2', 
		'\x2', '\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\a', '$', '\x2', '\x2', '\x8C', 
		'\x8D', '\x5', '\x34', '\x1B', '\x2', '\x8D', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\x8E', '\x90', '\x5', '\x42', '\"', '\x2', '\x8F', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', '\x2', '\x90', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\a', '%', '\x2', 
		'\x2', '\x92', '\x93', '\x5', '\x34', '\x1B', '\x2', '\x93', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x94', '\x96', '\a', '\x15', '\x2', '\x2', '\x95', 
		'\x97', '\x5', '\x34', '\x1B', '\x2', '\x96', '\x95', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x9A', '\a', '\x14', '\x2', '\x2', '\x99', 
		'\x9B', '\x5', '\x34', '\x1B', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\x1D', '\x2', '\x2', '\x9D', 
		'\x9E', '\x5', '\x30', '\x19', '\x2', '\x9E', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', '\xA0', '\a', '\x1E', '\x2', '\x2', '\xA0', '\xA1', '\x5', 
		'\x30', '\x19', '\x2', '\xA1', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\a', '\x1F', '\x2', '\x2', '\xA3', '\xA4', '\x5', '\x30', '\x19', 
		'\x2', '\xA4', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\x5', 
		'\x42', '\"', '\x2', '\xA6', '\xA7', '\a', '\x1C', '\x2', '\x2', '\xA7', 
		'\xA8', '\x5', '\x34', '\x1B', '\x2', '\xA8', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', '\x1B', '\x2', '\x2', '\xAA', '\xAB', '\x5', 
		' ', '\x11', '\x2', '\xAB', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xB2', '\x5', '$', '\x13', '\x2', '\xAD', '\xAE', '\x5', '\"', '\x12', 
		'\x2', '\xAE', '\xAF', '\x5', '$', '\x13', '\x2', '\xAF', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB0', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB6', '\a', '\x6', '\x2', '\x2', '\xB6', '\xB7', '\x5', ' ', '\x11', 
		'\x2', '\xB7', '\xB8', '\a', '\a', '\x2', '\x2', '\xB8', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xB9', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xBA', '!', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xBC', '\t', '\x2', '\x2', '\x2', '\xBC', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xBD', '\xC2', '\x5', '\x42', '\"', '\x2', '\xBE', 
		'\xC2', '\x5', '\x44', '#', '\x2', '\xBF', '\xC0', '\a', '!', '\x2', '\x2', 
		'\xC0', '\xC2', '\x5', '$', '\x13', '\x2', '\xC1', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xC1', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '%', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC4', '\a', '\x1A', '\x2', '\x2', '\xC4', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC6', '\a', '\x18', '\x2', '\x2', '\xC6', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', '\x19', '\x2', '\x2', '\xC8', 
		'\xC9', '\x5', '\x34', '\x1B', '\x2', '\xC9', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCB', '\a', '\x17', '\x2', '\x2', '\xCB', '\xCC', '\x5', 
		'@', '!', '\x2', '\xCC', '-', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', 
		'\a', '\x16', '\x2', '\x2', '\xCE', '\xCF', '\x5', '\x42', '\"', '\x2', 
		'\xCF', '/', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD5', '\x5', '\x34', 
		'\x1B', '\x2', '\xD1', '\xD2', '\a', '\n', '\x2', '\x2', '\xD2', '\xD4', 
		'\x5', '\x34', '\x1B', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\xD9', '\x5', '\x42', '\"', '\x2', '\xD9', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\xDA', '\xDF', '\x5', '\x36', '\x1C', '\x2', '\xDB', '\xDC', 
		'\a', ',', '\x2', '\x2', '\xDC', '\xDE', '\x5', '\x36', '\x1C', '\x2', 
		'\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', 
		'\x2', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE7', '\x5', '\x38', 
		'\x1D', '\x2', '\xE3', '\xE4', '\t', '\x3', '\x2', '\x2', '\xE4', '\xE6', 
		'\x5', '\x38', '\x1D', '\x2', '\xE5', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE6', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', 
		'\x2', '\x2', '\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', 
		'\xEA', '\x10A', '\x5', '\x44', '#', '\x2', '\xEB', '\x10A', '\x5', '<', 
		'\x1F', '\x2', '\xEC', '\x10A', '\x5', '>', ' ', '\x2', '\xED', '\x10A', 
		'\x5', '\x42', '\"', '\x2', '\xEE', '\x10A', '\x5', '@', '!', '\x2', '\xEF', 
		'\xF0', '\a', '\x6', '\x2', '\x2', '\xF0', '\xF1', '\x5', '\x34', '\x1B', 
		'\x2', '\xF1', '\xF2', '\a', '\a', '\x2', '\x2', '\xF2', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF6', '\x5', '\x44', '#', '\x2', '\xF4', 
		'\xF6', '\x5', '\x42', '\"', '\x2', '\xF5', '\xF3', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', 
		'\x2', '\x2', '\x2', '\xF6', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF7', 
		'\xF8', '\a', '\xF', '\x2', '\x2', '\xF8', '\xF9', '\x5', '\x34', '\x1B', 
		'\x2', '\xF9', '\xFA', '\a', '\x10', '\x2', '\x2', '\xFA', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFC', '\x5', ':', '\x1E', '\x2', '\xFC', 
		'\xFD', '\x5', '\x34', '\x1B', '\x2', '\xFD', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFF', '\a', '!', '\x2', '\x2', '\xFF', '\x10A', '\x5', 
		'\x34', '\x1B', '\x2', '\x100', '\x101', '\a', '\"', '\x2', '\x2', '\x101', 
		'\x10A', '\x5', '\x34', '\x1B', '\x2', '\x102', '\x103', '\a', '&', '\x2', 
		'\x2', '\x103', '\x10A', '\x5', '\x34', '\x1B', '\x2', '\x104', '\x105', 
		'\x5', '>', ' ', '\x2', '\x105', '\x106', '\a', '\x4', '\x2', '\x2', '\x106', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', '\x5', '\x34', 
		'\x1B', '\x2', '\x108', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\x109', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\xEC', '\x3', '\x2', '\x2', '\x2', '\x109', '\xED', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\xEE', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\xEF', '\x3', '\x2', '\x2', '\x2', '\x109', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x109', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x109', '\x100', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x102', '\x3', '\x2', '\x2', '\x2', '\x109', '\x104', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x39', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10D', 
		'\t', '\x4', '\x2', '\x2', '\x10C', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x10E', '\x10F', '\a', ' ', '\x2', '\x2', '\x10F', 
		';', '\x3', '\x2', '\x2', '\x2', '\x110', '\x111', '\a', '+', '\x2', '\x2', 
		'\x111', '=', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\a', '(', 
		'\x2', '\x2', '\x113', '?', '\x3', '\x2', '\x2', '\x2', '\x114', '\x115', 
		'\a', '/', '\x2', '\x2', '\x115', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x117', '\a', '-', '\x2', '\x2', '\x117', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\x118', '\x11A', '\a', ',', '\x2', '\x2', '\x119', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', '\a', 
		'.', '\x2', '\x2', '\x11C', '\x45', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x11E', '\a', ')', '\x2', '\x2', '\x11E', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x120', '\a', '*', '\x2', '\x2', '\x120', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\x121', '\x122', '\a', '\'', '\x2', '\x2', '\x122', 'K', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', 'Q', 'X', '\\', '`', '\x63', '\x66', 
		'j', 'n', '\x80', '\x83', '\x89', '\x8F', '\x96', '\x9A', '\xB2', '\xB9', 
		'\xC1', '\xD5', '\xDF', '\xE7', '\xF5', '\x109', '\x10C', '\x119',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
